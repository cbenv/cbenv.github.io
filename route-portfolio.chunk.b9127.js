webpackJsonp([0],{"+eY/":function(e){e.exports={button:"button__jQNF7"}},"4Q9v":function(e){e.exports={portfolio:"portfolio__2ny0K",viewResumeButton:"viewResumeButton__2ju3r",viewResumeLink:"viewResumeLink__306VG"}},HoW2:function(e){e.exports={card:"card__2a8Ev"}},a9hd:function(e,t,o){"use strict";function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=o("KM04"),d=o("HoW2"),h=o.n(d),m=function(e){function t(){return n(this,e.apply(this,arguments))}return a(t,e),t.prototype.render=function(e){return Object(u.h)("div",{className:h.a.card+" "+e.className+" mdl-card mdl-shadow--2dp"},Object(u.h)("div",{className:"mdl-card__title"},e.title),Object(u.h)("div",{className:"mdl-card__chips"},e.chips),Object(u.h)("div",{className:"mdl-card__media"},e.media),Object(u.h)("div",{className:"mdl-card__supporting-text"},e.supportingText),Object(u.h)("div",{className:"mdl-card__actions"},e.actions))},t}(u.Component),b=o("rIsq"),f=o("hVI0"),g=o.n(f),y=function(e){function t(){return i(this,t),r(this,e.apply(this,arguments))}return s(t,e),t.prototype.render=function(e){return Object(u.h)("span",{className:g.a.chip+" "+e.className+" mdl-chip"},Object(u.h)("span",{className:"mdl-chip__text"},e.children))},t}(u.Component),w=o("rAoZ"),v=[{url:"https://github.com/cbenv/github-dashboard",title:"GitHub Dashboard",description:"Simple dashboard to keep track of pull requests from configurable list of GitHub repositories.",completion:"2017",techs:["NodeJS","ExpressJS","Angular","Material Design","Server-Side Rendering","RxJS"]},{url:"https://github.com/cbenv/mailer",title:"Mailer",description:"Lightweight node server to send email via external SMTP server. This application is a thin wrapper around Nodemailer.",completion:"2017",techs:["NodeJS","ExpressJS","SMTP"]},{url:"https://github.com/cbenv/mean-passport-quickstart",title:"Portal",description:"Starter RESTful web application built on MEAN stack that includes user authentication, where authentication token is generated and signed with JWT. JSON Web Token is checked upon calling restricted API by Express middleware. Every token generated is logged and stored in the database so user may see their authorized sessions. On top of managing their sessions, with this service user may also register, login, verify their email, recover forgotten login ID, reset password, see and update their information, logout, deactivate account, as well as delete account.",completion:"Ongoing",techs:["NodeJS","ExpressJS","REST API","Angular","JWT","Crpytography","SMTP"]},{url:"",title:"HTCNA",description:"Website for the Holy Trinity Community North America where guests may find information on this lay community while members have access to restricted internal web application, where they may read the statutes, access documents, look at materials, post questions, get announcements, request intercession, etc. Numerous user groups are available, each with its own priviledges and restrictions. The web application also provides RESTful backend for B2B companion mobile application to be used exclusively by its members.",completion:"Ongoing",techs:["PHP","Slim","MySQL","REST API","Mobile Hybrid Application","AngularJS"]},{url:"https://PF1010.systemsbiology.net/",title:"Feed 1010",description:"Started by the Institute Systems of Biology Seattle, the project consists of constructing the backend of the webpage using Flask; the frontend of the webpage using HTML5, CSS3, AngularJS, and jQuery; as well hybrid iOS and Android application built on Apache Cordova and Ionic Frameworks. Project Feed 1010 is meant to promote aquaponics and the web service aims to provide farmers, teachers, and students a gateway to their and others's aquaponics systems. Visitors may explore the existing systems, read the curriculum, or simply look at other resources. Users may see the latest readings, submit readings, and analyze and compare systems with interactive graphs. Making friend requests, posting to timeline, browsing through newsfeed, subscribing to a system, are some of the features of the social component.",completion:"2016",techs:["Flask","AngularJS","jQuery","REST API","MySQL","Mobile Hybrid Application"],responsibilities:["Illustrated mock-ups and redesigned aquaponics.systemsbiology.net.","Set up common theme for the website and developed the backend based on Flask framework.","Integrated Googleâ€™s Google+ API for user authentication and utilized Maps API to display map.","Established common contracts with other teams, totaling around 25 developers, and exchanged APIs for integration."]},{url:"https://github.com/cbenv/property-rental",title:"Property Rental",description:"The application is written in Java and deployed on Heroku which provides the backend for an application similar to airbnb. This Dropwizard application documents its API with the help of Swagger. The application communicates with PostgreSQL via Hibernate ORM where queries against the database is written in HQL. For continous integration the test-driven-development makes use of Codeship.",completion:"2016",techs:["Dropwizard","REST API","Swagger","Hibernate","PostgreSQL","Continuous Integration"],responsibilities:["Led a team of 4 to develop the backed for an application similar to Airbnb.","Held weekly meeting/scrum to keep the team up-to-date, to resolve uncertainty, and to distribute tasks followed by discussing responsibilities and assigning them to team members.","Tuned Swagger for easier maintenance of documentation and Codeship for agile, continuous, and test-driven-development."]},{url:"",title:"Gringotts",description:"A complete rewrite of LOQ, a past project. Gringotts is a password manager with support for two-steps authentication as well as password generator. The hybrid mobile application is able to scan QR code to parse token information or to enter it manually. All data are encrypted and stored in the cloud for backup and for ease of access across devices. Two steps authentication can be either time-based (TOTP) or counter-based (HOTP). The hashing algorithms to generate token can be SHA1, SHA256, or SHA512. The number of digits of token can range from 6 to 8.",completion:"2016",techs:["NodeJS","ExpressJS","MongoDB","Mobile Hybrid Application","AngularJS","REST API","Cryptography","QR Code"],responsibilities:["Architected and tested the whole application stack from backend to frontend.","Researched various encryption algorithms, the degree of protection, as well as ease of integration.","Incorporated Stanford JavaScript Crypto Library (SJCL) for encryption and Cordova Barcode Scanner to interpret QR Code containing parameters to generate two-step-authentication token."]},{url:"",title:"Vertical Search Engine",description:"Search engine powered by elasticsearch where documents are more than 30000 raw web pages crawled using Python. The crawl respects each website's robot.txt and maintains one second delay between requests to avoid overloading and possible IP ban while smartly filters out irrelevant websites by inspecting their metadata using Regular Expression. As the Python script reads through each website document statistics are computed. Algorithms supported for document ranking include elasticsearch's ranking, TF-IDF, Okapi-TF, Okapi-BM25, Laplace Unigram LM, Jelinek-Mercer Unigram LM, as well as Google's Page Ranking. Calaca serves as the frontend to search against the elasticsearch.",completion:"2015",techs:["Elasticsearch","Vector Space Retrieval","Language Model","Page Ranking","Regular Expression","Calaca"],responsibilities:["Wrote Python script to crawl over 30000 webpages overnight while still respecting website's robot.txt and maintaining at least a second delay between requests made to the same host.","Implemented TF-IDF, Okapi-TF, Okapi-BM25, Laplace Unigram LM, Jelinek-Mercer Unigram LM, as well as Google's Page Ranking algorithm to calculate document ranking.","Designed web interface based on Calaca to search for relevant articles stored in elasticsearch."]},{url:"https://github.com/cbenv/orate-mobile",title:"Orate",description:"Companion mobile application for Catholics. It provides easy access to the daily readings complete with lectionary number and liturgy color, daily reflections, and liturgy of the hour. In addition there are collections of prayers such as the rosaries, station of the cross, as well as a list of saints and examination of conscience. The content of the application is fetched from external websites and Regular Expression is used to extract relevant information and beautify presentation.",completion:"2015",techs:["Mobile Hybrid Application","AngularJS","REST API","Regular Expression"]},{url:"https://github.com/cbenv/restaurant-pos",title:"Restaurant POS System",description:"Point of Sale system meant to be used by restaurants to manage online orders and delivery. There exist three user roles namely manager, driver, and customer. Customer is able to place order, view its status, as well as track the driver's position while on delivery. Driver exposes their location to customers and managers, notifies the system of their availability, and confirms delivery completion. Manager on the other hand is capable of processing orders, assigning orders to drivers, and updating the restaurant menu. Feedback system is available for the customers, the drivers involved, as well as the managers to communicate.",completion:"2015",techs:["NodeJS","AngularJS","ExpressJS","MongoDB","REST API"]},{url:"",title:"Dota Guide",description:"Collaborative guide for Dota 2 gamers. This Java EE application is written in JSP and allows users to submit skill build along with item build for heroes in Dota 2. Users may also view guides, comment on them, and mark them as favorites. Heroes are grouped by their primary attributes and basic information on heroes' skills as well as items are fetched by parsing Valve Data File.",completion:"2014",techs:["JSP","Tomcat","MySQL","JDBC","REST API","jQuery"]},{url:"",title:"LOQ",description:"Password manager with support for two-steps authentication as well as password generator. The native iOS application is able to scan QR code to parse token information or to enter it manually. All data are stored locally to avoid exposing user's information to the outside. Data may be retrieved for backup purposes through iTunes. Two steps authentication can be either time-based (TOTP) or counter-based (HOTP). The hashing algorithms to generate token can be SHA1, SHA256, or SHA512. The number of digits of token can range from 6 to 8. The application can communicate with a complimentary OSX Application to send clipboard that contains the credentials of a website.",completion:"2014",techs:["CoreData","Zeroconf Bonjour"]}],S=v,O=o("4Q9v"),k=o.n(O);o.d(t,"default",function(){return P});var T=Object(u.h)("h3",null,"Portfolio"),P=function(e){function t(){c(this,t);var o=l(this,e.call(this));return o.renderCase=o.renderCase.bind(o),o}return p(t,e),t.prototype.renderCase=function(e){var t=e.url?Object(u.h)(b.a,{href:e.url},e.title):Object(u.h)("span",null,e.title),o=Object(u.h)("div",null,e.techs.map(function(e,t){return Object(u.h)(y,{key:t},e)})),n=e.description;return Object(u.h)(m,{title:t,chips:o,supportingText:n})},t.prototype.render=function(){var e=this;return Object(u.h)("div",{className:k.a.portfolio},T,Object(u.h)("div",null,S.map(function(t){return e.renderCase(t)})),Object(u.h)("div",null,Object(u.h)(b.a,{className:k.a.viewResumeLink,href:"/assets/documents/resume.pdf"},Object(u.h)(w.a,{className:k.a.viewResumeButton},"View Resume"))))},t}(u.Component)},hVI0:function(e){e.exports={chip:"chip__2MYTV"}},rAoZ:function(e,t,o){"use strict";function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}o.d(t,"a",function(){return c});var i=o("KM04"),r=(o.n(i),o("+eY/")),s=o.n(r),c=function(e){function t(){return n(this,e.apply(this,arguments))}return a(t,e),t.prototype.render=function(e){return Object(i.h)("button",{className:s.a.button+" "+e.className+" mdl-button mdl-js-button mdl-button--raised mdl-button--colored"},e.children)},t}(i.Component)}});
//# sourceMappingURL=route-portfolio.chunk.b9127.js.map